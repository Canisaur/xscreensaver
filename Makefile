# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.74 92/12/02 21:32:49 rws Exp $

# -------------------------------------------------------------------------
# Makefile generated from "Imake.tmpl" and </tmp/IIf.a006KZ>
# $XConsortium: Imake.tmpl,v 1.160 92/11/18 14:11:25 rws Exp $
#
# Platform-specific parameters may be set in the appropriate <vendor>.cf
# configuration files.  Site-specific parameters should be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor does not define any unique symbols, you will need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make World" the first time).
#

# -------------------------------------------------------------------------
# site-specific configuration parameters that need to come before
# the platform-specific parameters - edit site.def to change

# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

# -------------------------------------------------------------------------
# platform-specific configuration parameters - edit sco.cf to change

#
#
# Copyright (C) 1983-1991 The Santa Cruz Operation, Inc.
#
# The information in this file is provided for the exclusive use of the
# licensees of The Santa Cruz Operation, Inc.  Such users have the right
# to use, modify, and incorporate this code into other products for
# purposes authorized by the license agreement provided they include this
# notice and the associated copyright notice with any such product.  The
# information in this file is provided "AS IS" without warranty.
#
#
# platform:  SCO sco.cf

PATH = /bin:/usr/bin:/usr/bin/X11

# -------------------------------------------------------------------------
# site-specific configuration parameters that go after
# the platform-specific parameters - edit site.def to change

# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

            SHELL = /bin/sh

              TOP = .
      CURRENT_DIR = .

               AR = ar clq
              ASM = as
  BOOTSTRAPCFLAGS = -Dsco
               CC = cc
               AS = as

         COMPRESS = compress
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = /lib/cpp -P $(ALLDEFINES) $(STD_CPP_DEFINES)
          INSTALL = /usr/bin/X11/scoinst
               LD = ld
              LEX = lex
             YACC = yacc
             LINT = lint
      LINTLIBFLAG = -o
         LINTOPTS = -ax
               LN = ln
             MAKE = make
               MV = mv
               CP = cp

               RM = rm -f
     ASM_INCLUDES =
            TROFF = psroff
         MSMACROS = -ms
              TBL = tbl
              EQN = eqn
     STD_INCLUDES =
  STD_CPP_DEFINES = -Dsco -DSYSV
      STD_DEFINES = -Dsco -DSYSV
 EXTRA_LOAD_FLAGS =
  EXTRA_LDOPTIONS =
  EXTRA_LIBRARIES = -lsocket -lmalloc
             TAGS = ctags

           MFLAGS = -$(MAKEFLAGS)

    PROTO_DEFINES =

     INSTPGMFLAGS =

     INSTBINFLAGS = -m 0755
     INSTUIDFLAGS = -m 4755
     INSTLIBFLAGS = -m 0644
     INSTINCFLAGS = -m 0444
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
    INSTKMEMFLAGS = -m 4755

    ASMDEBUGFLAGS =
      ASM_DEFINES =
      CDEBUGFLAGS =
        CCOPTIONS =

      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
         ASMFLAGS = $(ASMDEBUGFLAGS) $(ASM_DEFINES) $(ASM_INCLUDES)
           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)

           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(EXTRA_LDOPTIONS) $(LOCAL_LDFLAGS)

   LDCOMBINEFLAGS = -X -r
      DEPENDFLAGS =

        MACROFILE = sco.cf
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut

    IMAKE_DEFINES =

         IRULESRC = $(CONFIGDIR)
        IMAKE_CMD = $(IMAKE) -DUseInstalled -I$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE)  \
			$(EXTRA_ICONFIGFILES)

# -------------------------------------------------------------------------
# X Window System Build Parameters
# $XConsortium: Project.tmpl,v 1.157 93/06/24 10:51:47 dpw Exp $

# -------------------------------------------------------------------------
# X Window System make variables; this need to be coordinated with rules

          PATHSEP = /
        USRLIBDIR = /usr/lib
         SHLIBDIR = /usr/lib
           BINDIR = /usr/bin/X11
          INCROOT = /usr/include
     BUILDINCROOT = $(TOP)
      BUILDINCDIR = $(BUILDINCROOT)/X11
      BUILDINCTOP = ..
           INCDIR = $(INCROOT)/X11
           ADMDIR = /usr/adm
           LIBDIR = $(USRLIBDIR)/X11
        CONFIGDIR = $(LIBDIR)/config
       LINTLIBDIR = $(USRLIBDIR)/lint

          FONTDIR = $(LIBDIR)/fonts
         XINITDIR = $(LIBDIR)/xinit
           XDMDIR = $(LIBDIR)/xdm
           TWMDIR = $(LIBDIR)/twm
          MANPATH = /usr/man
    MANSOURCEPATH = $(MANPATH)/man
        MANSUFFIX = n
     LIBMANSUFFIX = 3
           MANDIR = $(MANSOURCEPATH)$(MANSUFFIX)
        LIBMANDIR = $(MANSOURCEPATH)$(LIBMANSUFFIX)
           NLSDIR = $(LIBDIR)/nls
        PEXAPIDIR = $(LIBDIR)/PEX
      XAPPLOADDIR = $(LIBDIR)/app-defaults
       FONTCFLAGS = -t

     INSTAPPFLAGS = $(INSTDATFLAGS)

            IMAKE = imake
           DEPEND = makedepend
              RGB = rgb

            FONTC = bdftopcf

        MKFONTDIR = mkfontdir
        MKDIRHIER = /bin/sh $(BINDIR)/mkdirhier

        CONFIGSRC = $(TOP)/config
       DOCUTILSRC = $(TOP)/doc/util
        CLIENTSRC = $(TOP)/clients
          DEMOSRC = $(TOP)/demos
           LIBSRC = $(TOP)/lib
          FONTSRC = $(TOP)/fonts
       INCLUDESRC = $(TOP)/X11
        SERVERSRC = $(TOP)/server
          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
       EXAMPLESRC = $(TOP)/examples
       CONTRIBSRC = $(TOP)/../contrib
           DOCSRC = $(TOP)/doc
           RGBSRC = $(TOP)/rgb
        DEPENDSRC = $(UTILSRC)/makedepend
         IMAKESRC = $(CONFIGSRC)
         XAUTHSRC = $(LIBSRC)/Xau
          XLIBSRC = $(LIBSRC)/X
           XMUSRC = $(LIBSRC)/Xmu
       TOOLKITSRC = $(LIBSRC)/Xt
       AWIDGETSRC = $(LIBSRC)/Xaw
       OLDXLIBSRC = $(LIBSRC)/oldX
      XDMCPLIBSRC = $(LIBSRC)/Xdmcp

      BDFTOPCFSRC = $(FONTSRC)/clients/bdftopcf

     MKFONTDIRSRC = $(FONTSRC)/clients/mkfontdir
         FSLIBSRC = $(FONTSRC)/lib/fs
    FONTSERVERSRC = $(FONTSRC)/server
     EXTENSIONSRC = $(TOP)/extensions
         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
      XTESTLIBSRC = $(EXTENSIONSRC)/lib/xtest
        PEXLIBSRC = $(EXTENSIONSRC)/lib/PEXlib
      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX

  DEPEXTENSIONLIB = $(USRLIBDIR)/libXext.a
     EXTENSIONLIB =  -lXext

          DEPXLIB = $(DEPEXTENSIONLIB) $(USRLIBDIR)/libX11.a
         XLIBONLY =  -lX11
             XLIB = $(EXTENSIONLIB) $(XLIBONLY) $(SCOMALLOC)

      DEPXAUTHLIB = $(USRLIBDIR)/libXau.a
         XAUTHLIB =  -lXau
      DEPXDMCPLIB = $(USRLIBDIR)/libXdmcp.a
         XDMCPLIB =  -lXdmcp

        DEPXMULIB = $(USRLIBDIR)/libXmu.a
           XMULIB =  -lXmu

       DEPOLDXLIB = $(USRLIBDIR)/liboldX.a
          OLDXLIB =  -loldX

      DEPXTOOLLIB = $(USRLIBDIR)/libXt.a
         XTOOLLIB =  -lXt

        DEPXAWLIB = $(USRLIBDIR)/libXaw.a
           XAWLIB =  -lXaw

        DEPXILIB = $(USRLIBDIR)/libXi.a
           XILIB =  -lXi

     DEPXTESTLIB = $(USRLIBDIR)/libXtst.a
        XTESTLIB =  -lXtst

       DEPPEXLIB = $(USRLIBDIR)/libPEX5.a
          PEXLIB =  -lPEX5

        DEPPHIGSLIB = $(USRLIBDIR)/libphigs.a
           PHIGSLIB =  -lphigs

       DEPXBSDLIB = $(USRLIBDIR)/libXbsd.a
          XBSDLIB =  -lXbsd

 LINTEXTENSIONLIB = $(LINTLIBDIR)/llib-lXext.ln
         LINTXLIB = $(LINTLIBDIR)/llib-lX11.ln
          LINTXMU = $(LINTLIBDIR)/llib-lXmu.ln
        LINTXTOOL = $(LINTLIBDIR)/llib-lXt.ln
          LINTXAW = $(LINTLIBDIR)/llib-lXaw.ln
           LINTXI = $(LINTLIBDIR)/llib-lXi.ln
          LINTPEX = $(LINTLIBDIR)/llib-lPEX5.ln
        LINTPHIGS = $(LINTLIBDIR)/llib-lphigs.ln

#   $RCSfile: Motif.tmpl.ixi.install,v $ $Revision: 11.1 $ $Date: 1994/07/12 16:46:05 $

              XTOP = $(TOP)
              MTOP = $(TOP)
     XBUILDINCROOT = $(XTOP)
      XBUILDINCDIR = $(XBUILDINCROOT)/X11

         CLIENTSRC = $(XTOP)/clients
           DEMOSRC = $(XTOP)/demos
            LIBSRC = $(XTOP)/lib
           FONTSRC = $(XTOP)/fonts
        INCLUDESRC = $(XTOP)/X11
         SERVERSRC = $(XTOP)/server
           UTILSRC = $(XTOP)/util
        EXAMPLESRC = $(XTOP)/examples
            DOCSRC = $(XTOP)/doc
            RGBSRC = $(XTOP)/rgb
      EXTENSIONSRC = $(XTOP)/extensions

      UIL_INCLUDES = -I$(USRINCDIR)/uil

      USRINCDIR = /usr/include
         UIDDIR = $(LIBDIR)/uid
        TESTSRC = $(MTOP)/tests
        TESTLIB = $(TESTSRC)/lib
  GENERALSRCLIB = $(TESTSRC)/General/lib
  GENERALSRCBIN = $(TESTSRC)/General/bin
   MANUALSRCLIB = $(TESTSRC)/Manual/lib
   MANUALSRCBIN = $(TESTSRC)/Manual/bin
     AUTOSRCLIB = $(TESTSRC)/Auto/lib
     AUTOSRCBIN = $(TESTSRC)/Auto/bin
       COMMONPP = $(GENERALSRCBIN)/Commonpp
         GENRUN = $(GENERALSRCBIN)/Genrun
         MANRUN = $(GENERALSRCBIN)/Manrun

     TESTCOMSRC = $(AUTOSRCLIB)/Common
  AUTOSCRIPTSRC = $(AUTOSRCLIB)/Script
   AUTOSYNTHSRC = $(AUTOSRCLIB)/Synth
  AUTOCREATESRC = $(AUTOSRCLIB)/Create
  AUTOVISUALSRC = $(AUTOSRCLIB)/Visual
    AUTOUTILSRC = $(AUTOSRCLIB)/Util
  AUTOEXTRALIBS = -ll -ly -lm

    MTOOLKITSRC = $(TOOLKITSRC)
    MINCLUDESRC = $(MTOP)/X11
        MLIBSRC = $(MTOP)/lib
     MCLIENTSRC = $(MTOP)/clients
       MDEMOSRC = $(MTOP)/demos
     MWIDGETSRC = $(MLIBSRC)/Xm
   MRESOURCESRC = $(MLIBSRC)/Mrm
         UILSRC = $(MCLIENTSRC)/uil

            UIL = uil
         DEPUIL = $(BINDIR)/uil

   XMEXTRA_LIBS = $(XMULIB)

DEPXMLIB = $(USRLIBDIR)/libXm.a
 XMLIB =  -lXm

DEPMRESOURCELIB = $(USRLIBDIR)/libMrm.a
 MRESOURCELIB =  -lMrm

DEPUILLIB = $(USRLIBDIR)/libUil.a
 UILLIB =  -lUil

DEPTESTCOMLIB = $(USRLIBDIR)/libCommon.a
 TESTCOMLIB =  -lCommon

DEPAUTOSCRIPTLIB = $(USRLIBDIR)/libScript.a
 AUTOSCRIPTLIB =  -lScript

DEPAUTOSYNTHLIB = $(USRLIBDIR)/libSynth.a
 AUTOSYNTHLIB =  -lSynth

DEPAUTOCREATELIB = $(USRLIBDIR)/libCreate.a
 AUTOCREATELIB =  -lCreate

DEPAUTOVISUALLIB = $(USRLIBDIR)/libVisual.a
 AUTOVISUALLIB =  -lVisual

DEPAUTOUTILLIB = $(USRLIBDIR)/libUtil.a
 AUTOUTILLIB =  -lUtil

  LINTMRESOURCE = $(MRESOURCESRC)/libMrm.a
LINTXMWIDGETLIB = $(MWIDGETSRC)/llib-l/Xm.ln
     LINTXMTOOL = $(MTOOLKITSRC)/llib-lXt.ln
     LINTUILLIB = $(UILSRC)/llib-lUil.ln

      YACCFLAGS =
       UILFLAGS =

         RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut  *.Dat *.Scr

    STD_DEFINES = -Dsco -DSYSV

# -------------------------------------------------------------------------
# Imake rules for building libraries, programs, scripts, and data files
# rules:  $XConsortium: Imake.rules,v 1.129 92/05/29 17:01:19 rws Exp $

#   $RCSfile: Motif.rules,v $ $Revision: 11.1 $ $Date: 1994/07/12 16:46:02 $

# -------------------------------------------------------------------------
# start of Imakefile

# @(#)Imakefile	4.03 97/04/30 xlockmore
#
# Define these now or down further below, see below for explaination.

# #define DtSaverLibrary
# #define RplayLibrary
# #define NasLibrary
# #define Hackers

PATH=/bin:/usr/bin:/usr/bin/X11:/usr/local/bin

N=
C=.c
# C++
# C=.cc
O=.o
# VMS
# O=.obj
S=$(N) $(N)
# VMS
# S=,
E=
# VMS
# E=.exe

# please define
# C as the C source code extension
# O as the object extension
# S as the separator for object code
# E as the executable extension

LN_S = $(LN)

# CC = cc
# CC = acc
# CC = CC
# CC = gcc -Wall
# CC = g++ -Wall
CC = gcc -melf

#      *** BEGIN XPM CONFIG SECTION ***

# Only the image.c and bat.c modes use this.
# If your system has libXpm, remove the 'XCOMM ' from the next line.
# #define

          XPMDEF = -DUSE_XPM
# Use the following if your xpm.h file is not in an X11 directory
#     XPMDEF = -DUSE_XPMINC

# If you get an error "Cannot find xpm.h" while compiling, set
# XPMINC to the directory X11/xpm.h is in.  Below is a guess.
          XPMINC = -I/u/rr/src/lib/xpm-3.4j
# SGI's ViewKit (use with -DUSE_XPMINC)
#     XPMINC = -I/usr/include/Vk

# If you get an error "Cannot find libXpm" while linking, set XPMLIBPATH
# to the directory libXpm.* is in.  Below is a guess.
          XPMLIB = /u/rr/src/lib/xpm-3.4j/lib/libXpm.a

#      *** END XPM CONFIG SECTION ***

#      *** BEGIN XM CONFIG SECTION ***

# Only options.c and xmlock.c uses Motif.
# You must copy it out of the hackers directory.
# It is there because it is experimental.
# If your system has libXm, remove the 'XCOMM ' from the next line.
# #define

# If its not with your X11 stuff you should set the following
#       MOTIFHOME = /usr/local
#       MOTIFHOME = /usr/dt

# If you get an error "Cannot find Xm/PanedW.h" while compiling, set
# XMINC to the directory Xm/PanedW.h is in.  Below is a guess.
#           XMINC = -I$(MOTIFHOME)/include

# If you get an error "Cannot find libXm" while linking, set XMLIBPATH
# to the directory libXm.* is in.  Below is a guess.
#           XMLIB = -L$(MOTIFHOME)/lib -lXm
           XMLIB = -lXm

# Debugging with editres
#     EDITRESDEF = -DUSE_XMU
#     EDITRESLIB = -lXmu

#      *** END XM CONFIG SECTION ***

#      *** BEGIN MESAGL CONFIG SECTION ***

# escher, gears, morph3d, pipes, superquadrics, sproingies modes use this.
# If your system has libMesaGL & widgets,
# remove the 'XCOMM ' from the next line.
# #define

          GLDEF = -DUSE_GL

# If you get an error "Cannot find GL/gl.h" while compiling, set
# GLINC to the directory GL/gl.h is in.
          GLINC = -I/u/rr/src/lib/Mesa-2.3/include

# If you get an error "Cannot find libMesaGL" while linking, set GLLIBPATH
# to the directory libMesaGL.* is in.  Below is a guess.
          GLLIB = /u/rr/src/lib/Mesa-2.3/lib/libMesaGL.a /u/rr/src/lib/Mesa-2.3/lib/libMesaGLU.a
# On SGI
#          GLLIB = lGL -lGLU -lgl

#      *** END MESAGL CONFIG SECTION ***

#      *** BEGIN CDE DT CONFIG SECTION ***

# COMMON DESKTOP ENVIRONMENT
# if your system has libDtSvc, remove the 'XCOMM ' from the next line
# #define DtSaverLibrary

#      *** END CDE DT CONFIG SECTION ***

#      *** BEGIN SOUND CONFIG SECTION ***

# Only xlock.c and resource.c use this
# if your system has these sound libraries, remove the 'XCOMM '
# #define RplayLibrary
# #define NasLibrary

# system play (optional software)
# SUNOS 4.1.3
# DEF_PLAY = "/usr/demo/SOUND/play /usr/local/share/sounds/xlock/"
# IRIX 5.3
# DEF_PLAY = "/usr/sbin/sfplay /usr/local/share/sounds/xlock/"
# Digital Unix with Multimedia Services installed:
# DEF_PLAY = "/usr/bin/mme/decsound -play /usr/local/share/sounds/xlock/"
# LINUX and others (see config directory)
# DEF_PLAY = "/usr/local/bin/play.sh /usr/local/share/sounds/xlock/"
# Uncomment line below if you have one of the above
# SOUNDDEF = -DDEF_PLAY=\"$(DEF_PLAY)\"

#      *** END SOUND CONFIG SECTION ***

#      *** BEGIN RNG CONFIG SECTION ***

# Uncomment to use your system's Random Number Generator
# They usually come in 3 types

# Uncomment to use high-precision (but expensive) RNG
# SRANDDEF = -DSRAND=srand48
# LRANDDEF = -DLRAND=lrand48

# SRANDDEF = -DSRAND=srandom
# LRANDDEF = -DLRAND=random

# Least desirable RNG
# SRANDDEF = -DSRAND=srand
# LRANDDEF = -DLRAND=rand

# Normally use the above with (default)
# MAXRANDDEF = -DMAXRAND=2147483648.0
# Use the following if using srand/rand and NOT AIXV3
# MAXRANDDEF = -DMAXRAND=32767.0
RANDDEF = $(SRANDDEF) $(LRANDDEF) $(MAXRANDDEF)

#      *** END RNG CONFIG SECTION ***

#      *** BEGIN EXTRA MODES CONFIG SECTION ***

# Uncomment to use sproingies mode.  It may be slow on certain machines.

# Uncomment to use hackers modes.  It may make xlock unstable.
# Please do not uncomment for precompiled distributions.
# #define Hackers

#      *** END EXTRA MODES CONFIG SECTION ***

      BITMAPDIR = ./bitmaps/
      PIXMAPDIR = ./pixmaps/
      CONFIGDIR = ./config/
      GLDIR = ./glx/
      HACKERDIR = ./hackers/

# KERBEROS
#   Kerberbos ver. 4
#      PASSWDDEF = -DHAVE_KRB4
#      PASSWDINC = -I/usr/athena/include
#      PASSWDLIB = -L/usr/athena/lib -lkrb -ldes -lresolv
#
#   Kerberos ver. 5  (good with b6)
#      PASSWDDEF = -DHAVE_KRB5
#      PASSWDINC = -I/opt/krb5/include
#      PASSWDLIB = -L/opt/krb5/lib -lkrb5 -lcrypto -lcom_err

# DCE authentication (tested only on HP's)
#      PASSWDDEF = -DDCE_PASSWD
#      PASSWDINC = -I/usr/include/reentrant
#      PASSWDLIB = -ldce -lc_r

      PASSWDDEF = -DHAVE_SHADOW -DSVR4

# Use this if your site is using OSF Enhanced Security:
#       PASSWDDEF = -DOSF1_ENH_SEC
#       PASSWDLIB = -lsecurity
# INSTPGMFLAGS = -g auth -m 2111
     BITMAPTYPE = x11
     PIXMAPTYPE = x11

#  -DUSE_VROOT          Allows xlock to run in root window (some
#                       window managers have problems)
#  -DALWAYS_ALLOW_ROOT  Users can not turn off allowroot
#  -DUSE_SYSLOG         Paranoid administrator option (a check is also
#                       done to see if you have it)
#  -DUSE_MULTIPLE_ROOT  Multiple root users ... security?
#  -DUSE_MOUSE_MOTION   Password screen displayed with mouse motion
#  -DUSE_OLD_EVENT_LOOP Some machines may still need this (fd_set
#                       errors may be a sign)
#  -DUSE_VMSUTILS       This patches up old __VMS_VER < 70000000
#
# For personal use you may want to consider:
#  -DUSE_XLOCKRC        paranoid admin or unknown shadow passwd alg
#
# For labs you may want to consider:
#  -DUSE_AUTO_LOGOUT=240  Enable auto-logout and set deadline (minutes)
#  -DDEF_AUTO_LOGOUT=\"120\" Set default auto-logout deadline (minutes)
#  -DUSE_BUTTON_LOGOUT=10 Enable logout button and set when to appear (min)
#  -DDEF_BUTTON_LOGOUT=\"5\" Set default logout button (min)
#  -DUSE_BOMB           Enable automatic logout mode (does not come up
#                       in random mode)
#  -DCLOSEDOWN_LOGOUT   Use with USE_AUTO_LOGOUT, USE_BUTTON_LOGOUT,
#                       USE_BOMB if using xdm
#  -DSESSION_LOGOUT     Alternate of above
#  -DSTAFF_FILE=\"/etc/xlock.staff\"  File of staff who are exempt
#  -DSTAFF_NETGROUP=\"/etc/xlock.netgroup\"  Netgroup that is exempt

# May have to combine in one long line if "+=" does not work
        OPTDEF = -DUSE_VROOT -DALWAYS_ALLOW_ROOT -DUSE_BOMB
#        OPTDEF += -DUSE_SYSLOG -DSYSLOG_FACILITY=LOG_AUTH
#        OPTDEF += -DSYSLOG_WARNING=LOG_WARNING
#        OPTDEF += -DSYSLOG_NOTICE=LOG_NOTICE -DSYSLOG_INFO=LOG_INFO
#        OPTDEF += -DUSE_MOUSE_MOTION
#        OPTDEF += -DUSE_MULTIPLE_ROOT
#        OPTDEF += -DUSE_OLD_EVENT_LOOP
#        OPTDEF += -DUSE_XLOCKRC
#        OPTDEF += -DUSE_AUTO_LOGOUT=240
#        OPTDEF += -DDEF_AUTO_LOGOUT=\"120\"
#        OPTDEF += -DUSE_BUTTON_LOGOUT=10
#        OPTDEF += -DDEF_BUTTON_LOGOUT=\"5\"
#        OPTDEF += -DCLOSEDOWN_LOGOUT
#        OPTDEF += -DSESSION_LOGOUT
#        OPTDEF += -DSTAFF_FILE=\"/etc/xlock.staff\"
#        OPTDEF += -DSTAFF_NETGROUP=\"/etc/xlock.netgroup\"

# Here is your chance to override the default icon:
# TINYBITMAP = $(BITMAPTYPE)
TINYBITMAP = t-x11
SMALLBITMAP = s-$(BITMAPTYPE)
MEDIUMBITMAP = m-$(BITMAPTYPE)
LARGEBITMAP = l-$(BITMAPTYPE)
MEDIUMPIXMAP = m-$(PIXMAPTYPE)
LARGEPIXMAP = l-$(PIXMAPTYPE)

# EYESBITMAP = $(MEDIUMBITMAP)
EYESBITMAP = m-grelb
FLAGBITMAP = $(MEDIUMBITMAP)
IMAGEBITMAP = $(MEDIUMBITMAP)
# IMAGEBITMAP = l-bob #Slackware icon
# IMAGEBITMAP = m-xlock #XLock icon
# LIFEBITMAP = $(SMALLBITMAP)
LIFEBITMAP = s-grelb
LIFE1DBITMAP = $(TINYBITMAP)
MAZEBITMAP = $(LARGEBITMAP)
# MAZEBITMAP = m-xlock
# PACMANBITMAP = $(MEDIUMBITMAP)
PACMANBITMAP = m-ghost
# PUZZLEBITMAP = $(LARGEBITMAP)
PUZZLEBITMAP = l-xlock
# PUZZLEBITMAP = l-linux
IMAGEPIXMAP = $(MEDIUMPIXMAP)
# IMAGEPIXMAP = m-xlock
# PUZZLEPIXMAP = $(LARGEPIXMAP)
PUZZLEPIXMAP = l-xlock
# PUZZLEPIXMAP = l-linux

        DEFINES = -DDEF_FILESEARCHPATH=\"$(LIBDIR)/%T/%N%S\" \
$(SYSTEMDEF) $(EDITRESDEF) $(SLEEPDEF) $(OPTDEF) $(RANDDEF) $(HACKERDEF) \
$(PASSWDDEF) $(XMINC) $(XPMDEF) $(GLDEF) $(DTSAVERDEF) $(SOUNDDEF) \
$(PASSWDINC) $(XPMINC) $(GLINC) $(DTSAVERINC) $(SOUNDINC)

        DEPLIBS = $(DEPXLIB)
LOCAL_LIBRARIES = $(XLIB) $(XPMLIB) $(GLLIB) $(DTSAVERLIB) $(SOUNDLIB)
        GUILIBS = $(XMLIB) $(EDITRESLIB) -lXt $(XLIB) $(SMLIB) $(ICELIB)
       LINTLIBS = $(LINTXLIB)

  SYS_LIBRARIES = $(CRYPTLIB) $(PASSWDLIB) -lm

XLOCKCOREOBJS = xlock$(O)$(S)passwd$(O)$(S)resource$(O)$(S)\
utils$(O)$(S)logout$(O)$(S)mode$(O)$(S)\
ras$(O)$(S)xbm$(O)$(S)color$(O)$(S)sound$(O)
XLOCKMODEOBJS = ant$(O)$(S)ball$(O)$(S)bat$(O)$(S)blot$(O)$(S)\
bouboule$(O)$(S)bounce$(O)$(S)braid$(O)$(S)bug$(O)$(S)\
clock$(O)$(S)crystal$(O)$(S)\
daisy$(O)$(S)dclock$(O)$(S)demon$(O)$(S)drift$(O)$(S)eyes$(O)$(S)\
flag$(O)$(S)flame$(O)$(S)forest$(O)$(S)fract$(O)$(S)\
galaxy$(O)$(S)geometry$(O)$(S)grav$(O)$(S)\
helix$(O)$(S)hop$(O)$(S)hyper$(O)$(S)\
ico$(O)$(S)ifs$(O)$(S)image$(O)$(S)julia$(O)$(S)kaleid$(O)$(S)\
laser$(O)$(S)life$(O)$(S)life1d$(O)$(S)life3d$(O)$(S)\
lightning$(O)$(S)lisa$(O)$(S)lissie$(O)$(S)loop$(O)$(S)\
marquee$(O)$(S)maze$(O)$(S)mountain$(O)$(S)nose$(O)$(S)\
pacman$(O)$(S)penrose$(O)$(S)petal$(O)$(S)puzzle$(O)$(S)pyro$(O)$(S)\
qix$(O)$(S)roll$(O)$(S)rotor$(O)$(S)\
shape$(O)$(S)sierpinski$(O)$(S)slip$(O)$(S)\
sphere$(O)$(S)spiral$(O)$(S)spline$(O)$(S)\
star$(O)$(S)strange$(O)$(S)swarm$(O)$(S)swirl$(O)$(S)\
triangle$(O)$(S)tube$(O)$(S)turtle$(O)$(S)voters$(O)$(S)\
wator$(O)$(S)wire$(O)$(S)world$(O)$(S)worm$(O)$(S)\
cartoon$(O)
XLOCKGLOBJS = escher$(O)$(S)gears$(O)$(S)morph3d$(O)$(S)superquadrics$(O)$(S)\
buildlwo$(O)$(S)pipes$(O)$(S)pipeobjs$(O)$(S)\
sproingies$(O)$(S)sproingiewrap$(O)$(S)s1_b$(O)$(S)\
s1_1$(O)$(S)s1_2$(O)$(S)s1_3$(O)$(S)s1_4$(O)$(S)s1_5$(O)$(S)s1_6$(O)
XLOCKCOREMODEOBJS = blank$(O)$(S)bomb$(O)$(S)random$(O)

XLOCKOBJS = $(XLOCKCOREOBJS)$(S)$(XLOCKMODEOBJS)$(S)\
$(XLOCKGLOBJS)$(XLOCKHACKEROBJS)$(S)$(XLOCKCOREMODEOBJS)
XMLOCKOBJS = option$(O)$(S)xmlock$(O)

BITMAPS = eyes.xbm flag.xbm ghost.xbm image.xbm life.xbm life1d.xbm \
maze.xbm puzzle.xbm
PIXMAPS = image.xpm puzzle.xpm
XLOCKHDRS = xlock.h mode.h vroot.h ras.h version.h gl/buildlwo.h
XLOCKCORESRCS = xlock$(C) passwd$(C) resource$(C) \
utils$(C) logout$(C) mode$(C) ras$(C) xbm$(C) \
color$(C) sound$(C)
XLOCKMODESRCS = ant$(C) ball$(C) bat$(C) blot$(C) \
bouboule$(C) bounce$(C) braid$(C) bug$(C) \
clock$(C) crystal$(C) \
daisy$(C) dclock$(C) demon$(C) drift$(C) eyes$(C) \
flag$(C) flame$(C) forest$(C) fract$(C) \
galaxy$(C) geometry$(C) grav$(C) \
helix$(C) hop$(C) hyper$(C) \
ico$(C) ifs$(C) image$(C) julia$(C) kaleid$(C) \
laser$(C) life$(C) life1d$(C) life3d$(C) \
lightning$(C) lisa$(C) lissie$(C) loop$(C) \
marquee$(C) maze$(C) mountain$(C) nose$(C) \
pacman$(C) penrose$(C) petal$(C) puzzle$(C) pyro$(C) \
qix$(C) roll$(C) rotor$(C) \
shape$(C) sierpinski$(C) slip$(C) sphere$(C) spiral$(C) spline$(C) \
star$(C) strange$(C) swarm$(C) swirl$(C) \
triangle$(C) tube$(C) turtle$(C) voters$(C)\
wator$(C) wire$(C) world$(C) worm$(C) \
cartoon$(C)
XLOCKGLSRCS = escher$(C) gears$(C) morph3d$(C) superquadrics$(C) \
buildlwo$(C) pipes$(C) pipeobjs$(C) \
sproingies$(C) sproingiewrap$(C) buildlwo$(C) s1_b$(C) \
s1_1$(C) s1_2$(C) s1_3$(C) s1_4$(C) s1_5$(C) s1_6$(C)
XLOCKCOREMODESRCS = blank$(C) bomb$(C) random$(C)
XLOCKHACKERSRCS = fadeplot$(C)
XLOCKSRCS = $(XLOCKCORESRCS) $(XLOCKMODESRCS) $(XLOCKCOREMODESRCS) \
$XLOCKSPROINGIESRCS) $(XLOCKHACKERSRCS)

XMLOCKSRCS = option$(C) xmlock$(C)

all:: xlock$(E)

depend:: $(BITMAPS) $(PIXMAPS)

xlock$(E):  $(XLOCKOBJS)  $(DEPXLIB)
	if [ -f $@ ]; then $(RM) $@~; $(MV) $@ $@~; fi
	$(CC) -o $@  $(XLOCKOBJS) $(LDOPTIONS)  $(LOCAL_LIBRARIES) $(LDLIBS)   $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) xlock$(E)

all:: xmlock$(E)

xmlock$(E):  $(XMLOCKOBJS)  $(DEPXLIB)
	if [ -f $@ ]; then $(RM) $@~; $(MV) $@ $@~; fi
	$(CC) -o $@  $(XMLOCKOBJS) $(LDOPTIONS)  $(GUILIBS) $(LDLIBS)   $(EXTRA_LOAD_FLAGS)

clean::
	$(RM) xmlock$(E)

depend::
	$(DEPEND) $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) $(DEPEND_DEFINES) -- $(SRCS)

lint:
	$(LINT) $(LINTFLAGS) $(SRCS) $(LINTLIBS)
lint1:
	$(LINT) $(LINTFLAGS) $(FILE) $(LINTLIBS)

install:: xlock$(E)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	$(INSTALL) -c $(INSTPGMFLAGS)  xlock$(E) $(DESTDIR)$(BINDIR)

install:: xmlock$(E)
	@if [ -d $(DESTDIR)$(BINDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(BINDIR)); fi
	$(INSTALL) -c $(INSTPGMFLAGS)  xmlock$(E) $(DESTDIR)$(BINDIR)

install:: XmLock.ad
	@if [ -d $(DESTDIR)$(XAPPLOADDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(XAPPLOADDIR)); fi
	$(INSTALL) -c $(INSTAPPFLAGS) XmLock.ad $(DESTDIR)$(XAPPLOADDIR)/XmLock

install:: XLock.ad
	@if [ -d $(DESTDIR)$(XAPPLOADDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(XAPPLOADDIR)); fi
	$(INSTALL) -c $(INSTAPPFLAGS) XLock.ad $(DESTDIR)$(XAPPLOADDIR)/XLock

install.man:: xlock.man
	@if [ -d $(DESTDIR)$(MANDIR) ]; then set +x; \
	else (set -x; $(MKDIRHIER) $(DESTDIR)$(MANDIR)); fi
	$(INSTALL) -c $(INSTMANFLAGS) xlock.man $(DESTDIR)$(MANDIR)/xlock.$(MANSUFFIX)

clean::
	$(RM) $(XLOCKGLSRCS) $(XLOCKHACKERSRCS)

distclean::	clean
	$(RM) Makefile config.status config.cache config.log config.h \
$(BITMAPS) $(PIXMAPS)

clean.all:: distclean

eyes.c: eyes.xbm
flag.c: flag.xbm
life.c: life.xbm
life1d.c: life1d.xbm
maze.c: maze.xbm
pacman.c: ghost.xbm

image.c: image.xbm image.xpm
puzzle.c: puzzle.xbm puzzle.xpm

eyes.xbm:
	$(RM) eyes.xbm ; $(LN_S) $(BITMAPDIR)$(EYESBITMAP).xbm eyes.xbm

flag.xbm:
	$(RM) flag.xbm ; $(LN_S) $(BITMAPDIR)$(FLAGBITMAP).xbm flag.xbm

image.xbm:
	$(RM) image.xbm ; $(LN_S) $(BITMAPDIR)$(IMAGEBITMAP).xbm image.xbm

life.xbm:
	$(RM) life.xbm ; $(LN_S) $(BITMAPDIR)$(LIFEBITMAP).xbm life.xbm

life1d.xbm:
	$(RM) life1d.xbm ; $(LN_S) $(BITMAPDIR)$(LIFE1DBITMAP).xbm life1d.xbm

maze.xbm:
	$(RM) maze.xbm ; $(LN_S) $(BITMAPDIR)$(MAZEBITMAP).xbm maze.xbm

ghost.xbm:
	$(RM) ghost.xbm ; $(LN_S) $(BITMAPDIR)$(PACMANBITMAP).xbm ghost.xbm

puzzle.xbm:
	$(RM) puzzle.xbm ; $(LN_S) $(BITMAPDIR)$(PUZZLEBITMAP).xbm puzzle.xbm

image.xpm:
	$(RM) image.xpm ; $(LN_S) $(PIXMAPDIR)$(IMAGEPIXMAP).xpm image.xpm

puzzle.xpm:
	$(RM) puzzle.xpm ; $(LN_S) $(PIXMAPDIR)$(PUZZLEPIXMAP).xpm puzzle.xpm

escher$(C) : $(GLDIR)escher$(C)
	$(RM) escher$(C) ; $(LN_S) $(GLDIR)escher$(C) escher$(C)

gears$(C) : $(GLDIR)gears$(C)
	$(RM) gears$(C) ; $(LN_S) $(GLDIR)gears$(C) gears$(C)

morph3d$(C) : $(GLDIR)morph3d$(C)
	$(RM) morph3d$(C) ; $(LN_S) $(GLDIR)morph3d$(C) morph3d$(C)

superquadrics$(C) : $(GLDIR)superquadrics$(C)
	$(RM) superquadrics$(C) ; $(LN_S) $(GLDIR)superquadrics$(C) superquadrics$(C)

buildlwo$(C) : $(GLDIR)buildlwo$(C)
	$(RM) buildlwo$(C) ; $(LN_S) $(GLDIR)buildlwo$(C) buildlwo$(C)

pipes$(C) : $(GLDIR)pipes$(C)
	$(RM) pipes$(C) ; $(LN_S) $(GLDIR)pipes$(C) pipes$(C)

pipeobjs$(C) : $(GLDIR)pipeobjs$(C)
	$(RM) pipeobjs$(C) ; $(LN_S) $(GLDIR)pipeobjs$(C) pipeobjs$(C)

sproingies$(C) : $(GLDIR)sproingies$(C)
	$(RM) sproingies$(C) ; $(LN_S) $(GLDIR)sproingies$(C) sproingies$(C)

sproingiewrap$(C) : $(GLDIR)sproingiewrap$(C)
	$(RM) sproingiewrap$(C) ; $(LN_S) $(GLDIR)sproingiewrap$(C) sproingiewrap$(C)

s1_b$(C) : $(GLDIR)s1_b$(C)
	$(RM) s1_b$(C) ; $(LN_S) $(GLDIR)s1_b$(C) s1_b$(C)

s1_1$(C) : $(GLDIR)s1_1$(C)
	$(RM) s1_1$(C) ; $(LN_S) $(GLDIR)s1_1$(C) s1_1$(C)

s1_2$(C) : $(GLDIR)s1_2$(C)
	$(RM) s1_2$(C) ; $(LN_S) $(GLDIR)s1_2$(C) s1_2$(C)

s1_3$(C) : $(GLDIR)s1_3$(C)
	$(RM) s1_3$(C) ; $(LN_S) $(GLDIR)s1_3$(C) s1_3$(C)

s1_4$(C) : $(GLDIR)s1_4$(C)
	$(RM) s1_4$(C) ; $(LN_S) $(GLDIR)s1_4$(C) s1_4$(C)

s1_5$(C) : $(GLDIR)s1_5$(C)
	$(RM) s1_5$(C) ; $(LN_S) $(GLDIR)s1_5$(C) s1_5$(C)

s1_6$(C) : $(GLDIR)s1_6$(C)
	$(RM) s1_6$(C) ; $(LN_S) $(GLDIR)s1_6$(C) s1_6$(C)

fadeplot$(C) : $(HACKERDIR)fadeplot$(C)
	$(RM) fadeplot$(C) ; $(LN_S) $(HACKERDIR)fadeplot$(C) fadeplot$(C)

VER = xlockmore
DISTVER = xlockmore-4.03

# -------------------------------------------------------------------------
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) "#"*

Makefile::
	-@if [ -f Makefile ]; then set -x; \
	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)

tags::
	$(TAGS) -w *.[ch]
	$(TAGS) -xw *.[ch] > TAGS

# -------------------------------------------------------------------------
# empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

Makefiles::

includes::

# -------------------------------------------------------------------------
# dependencies generated by makedepend

# DO NOT DELETE
